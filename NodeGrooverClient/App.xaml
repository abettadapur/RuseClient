<Application
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:NodeGrooverClient.Net"
             xmlns:views="clr-namespace:NodeGrooverClient.Views"
             xmlns:metro="http://schemas.codeplex.com/elysium"
             xmlns:params="http://schemas.codeplex.com/elysium/params" x:Class="NodeGrooverClient.App"
             xmlns:cv="clr-namespace:NodeGrooverClient.Views"
             xmlns:properties="clr-namespace:NodeGrooverClient.Properties"
             Startup="StartupHandler"
             StartupUri="Views\Window2.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>                
                <!--<ResourceDictionary Source="/Elysium;component/Themes/Generic.xaml"/>-->
                <ResourceDictionary Source="/Framework.UI;component/Themes/Generic.xaml"/>
             
            
                <ResourceDictionary>
                    <cv:VisibilityConverter x:Key="VisibilityConverter"/>
                    <properties:Settings x:Key="Settings"/>
                    
                    <Style x:Key="GroupHeaderTextStyle" TargetType="{x:Type TextBlock}">
                    	<Setter Property="FontFamily" Value="Segoe UI Light"/>
                    	<Setter Property="TextTrimming" Value="WordEllipsis"/>
                    	<Setter Property="TextWrapping" Value="NoWrap"/>
                    	<Setter Property="Typography.StylisticSet20" Value="True"/>
                    	<Setter Property="Typography.DiscretionaryLigatures" Value="True"/>
                    	<Setter Property="Typography.CaseSensitiveForms" Value="True"/>
                    	<Setter Property="FontSize" Value="36"/>
                    	<Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
                    	<Setter Property="FontWeight" Value="Light"/>
                    	<Setter Property="LineHeight" Value="30"/>
                    	<Setter Property="RenderTransform">
                    		<Setter.Value>
                    			<TranslateTransform X="-1" Y="6"/>
                    		</Setter.Value>
                    	</Setter>
                    </Style>
                    <Style x:Key="TabRadioButtonStyle" TargetType="{x:Type RadioButton}">
                    	<Setter Property="Template">
                    		<Setter.Value>
                    			<ControlTemplate TargetType="{x:Type RadioButton}">
                    				<Grid>
                    					<VisualStateManager.VisualStateGroups>
                    						<VisualStateGroup x:Name="CheckStates">
                    							<VisualState x:Name="Unchecked">
                    								<Storyboard>
                    									<ColorAnimation Duration="0" To="Gray" Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="TabButtonText" />
                    								</Storyboard>
                    							</VisualState>
                    							<VisualState x:Name="Indeterminate">
                    								<Storyboard>
                    									<ColorAnimation Duration="0" To="White" Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="TabButtonText" />
                    								</Storyboard>
                    							</VisualState>
                    							<VisualState x:Name="Checked">
                    								<Storyboard>
                    									<ColorAnimation Duration="0" To="White" Storyboard.TargetProperty="(TextBlock.Foreground).(SolidColorBrush.Color)" Storyboard.TargetName="TabButtonText" />
                    								</Storyboard>
                    							</VisualState>

                    						</VisualStateGroup>
                    					</VisualStateManager.VisualStateGroups>
                    					<TextBlock x:Name="TabButtonText" Text="{TemplateBinding Content}" Style="{StaticResource GroupHeaderTextStyle}" HorizontalAlignment="Left"/>
                    				</Grid>
                    			</ControlTemplate>
                    		</Setter.Value>
                    	</Setter>
                    </Style>

                    <Storyboard x:Key="FadeIn">
                    	<DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:.3"/>
                        <!--<DoubleAnimation Storyboard.TargetProperty="Width" From="0" Duration="0:0:.2"/>-->
                    </Storyboard>
                    <Storyboard x:Key="FadeOut">
                    	<DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:.3"/>
                        <!--<DoubleAnimation Storyboard.TargetProperty="Width" From="0" Duration="0:0:.2"/>-->
                    </Storyboard>

                    <Storyboard x:Key="FadeInTrans">
                    	<DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="0.75" Duration="0:0:.3"/>
                        <!--<DoubleAnimation Storyboard.TargetProperty="Width" From="0" Duration="0:0:.2"/>-->
                    </Storyboard>

                    <Storyboard x:Key="FadeOutTrans">
                    	<DoubleAnimation Storyboard.TargetProperty="Opacity" From="0.75" To="0" Duration="0:0:.3"/>
                        <!--<DoubleAnimation Storyboard.TargetProperty="Width" From="0" Duration="0:0:.2"/>-->
                    </Storyboard>


                    <Style TargetType="{x:Type Grid}" x:Key="FadeInGrid">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            	<BeginStoryboard Storyboard="{StaticResource FadeIn}"/>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>

                    <Style TargetType="{x:Type Canvas}" x:Key="FadeInCanvas">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            	<BeginStoryboard Storyboard="{StaticResource FadeIn}"/>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>


                    <Style x:Key="WhiteButton" TargetType="{x:Type Button}">
                    	<Setter Property="Foreground" Value="White"/>
                        <Style.Triggers>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Foreground" Value="Black"/>
                                <Setter Property="Background" Value="White"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    
                    <Style TargetType="{x:Type Image}" x:Key="FadeInImage">
                        <Style.Triggers>
                            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            	<BeginStoryboard Storyboard="{StaticResource FadeIn}"/>
                            </EventTrigger>
                        </Style.Triggers>
                    </Style>
                    <Style TargetType="{x:Type metro:CommandButton}" x:Key="FadeInButton" >
                    	<Setter Property="Background" Value="Transparent"/>
                    	<Setter Property="Foreground" Value="White"/>
                    	<Setter Property="BorderBrush" Value="White"/>
                        <Style.Triggers>
                            <Trigger Property="Visibility" Value="Visible">
                                <Trigger.ExitActions>
                                    <BeginStoryboard Storyboard="{StaticResource FadeOut}"/>
                                </Trigger.ExitActions>
                                <Trigger.EnterActions>
                                    <BeginStoryboard Storyboard="{StaticResource FadeIn}"/>
                                </Trigger.EnterActions>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background" Value="White"/>
                                <Setter Property="Foreground" Value="Black"/>
                            </Trigger>

                        </Style.Triggers>
                    </Style>

                   

                </ResourceDictionary>
            	<ResourceDictionary Source="Simple Styles.xaml"/>
            </ResourceDictionary.MergedDictionaries>            
        	
        </ResourceDictionary>
    </Application.Resources>
</Application>
